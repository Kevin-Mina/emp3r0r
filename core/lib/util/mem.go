package util

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"runtime"

	"github.com/jm33-m0/emp3r0r/core/lib/crypto"
	emp3r0r_data "github.com/jm33-m0/emp3r0r/core/lib/data"
)

// EXE_MEM_FILE save the whole executable
var EXE_MEM_FILE = make([]byte, 0)

// ExtractData extract embedded data from args[0] or process memory
func ExtractData() (data []byte, err error) {
	data, err = DigEmbeddedDataFromExe()
	if err != nil {
		log.Printf("Extract data from executable: %v", err)
		data, err = DigEmbededDataFromMem()
		if err != nil {
			err = fmt.Errorf("Extract data from memory: %v", err)
			return
		}
		log.Printf("Found %d bytes in memory", len(data))
	} else {
		log.Printf("Found %d bytes in %s", len(data), os.Args[0])
	}

	if len(data) <= 0 {
		err = fmt.Errorf("No data extracted")
	}

	return
}

func VerifyConfigData(data []byte) (jsonData []byte, err error) {
	// decrypt attached JSON file
	jsonData, err = crypto.AES_GCM_Decrypt(emp3r0r_data.OneTimeMagicBytes, data)
	if err != nil {
		err = fmt.Errorf("Decrypt config JSON failed (%v), invalid config data?", err)
		return
	}

	return
}

// GetProcessExe dump executable of target process
func GetProcessExe(pid int) (exe_data []byte, err error) {
	process_exe_file := fmt.Sprintf("/proc/%d/exe", pid)
	if runtime.GOOS == "windows" {
		process_exe_file = os.Args[0]
	}
	exe_data, err = os.ReadFile(process_exe_file)

	return
}

// DigEmbededDataFromFile search args[0] file content for data embeded between two separators
// separator is MagicString*3
func DigEmbeddedDataFromExe() ([]byte, error) {
	wholeStub, err := GetProcessExe(os.Getpid())
	log.Printf("Read %d bytes from process executable", len(wholeStub))
	if err != nil {
		return nil, err
	}

	return DigEmbeddedData(wholeStub, 0)
}

// DigEmbeddedData search for embedded data in given []byte buffer
// base is the starting address of the buffer (memory region), will be ignored if 0
func DigEmbeddedData(data []byte, base int64) (embedded_data []byte, err error) {
	// OneTimeMagicBytes is 16 bytes long random data,
	// generated by CC per session (delete ~/.emp3r0r to reset)
	// we use it to locate the embedded data
	magic_str := emp3r0r_data.OneTimeMagicBytes
	log.Printf("Digging with magic string '%x' (%d bytes)", magic_str, len(magic_str))
	sep := bytes.Repeat(magic_str, 2)

	if !bytes.Contains(data, sep) {
		err = fmt.Errorf("Cannot locate magic string '%x' in %d bytes of given data",
			magic_str, len(data))
		return
	}

	// locate embedded_data
	split := bytes.Split(data, sep)
	if len(split) < 2 {
		err = fmt.Errorf("Cannot locate embeded data from %d of given data", len(data))
		return
	}
	embedded_data = split[1]
	if len(embedded_data) <= 0 {
		err = fmt.Errorf("Digged nothing from %d of given data", len(data))
		return
	}

	// found and verify
	embedded_data, err = VerifyConfigData(embedded_data)
	if err != nil {
		err = fmt.Errorf("Verify config data: %v", err)
		return
	}

	// confirm
	log.Printf("Digged %d config bytes from %d bytes of given data at (0x%x)", len(embedded_data), len(data), base)
	return
}

// DigEmbededDataFromMem search process memory for data embeded between two separators
// separator is MagicString*3
func DigEmbededDataFromMem() (data []byte, err error) {
	mem_regions, err := DumpSelfMem()
	if err != nil {
		err = fmt.Errorf("Cannot dump self memory: %v", err)
		return
	}

	for base, mem_region := range mem_regions {
		data, err = DigEmbeddedData(mem_region, base)
		if err != nil {
			log.Printf("Nothing in memory region %d (%d bytes): %v", base, len(mem_region), err)
			continue
		}
		break
	}
	if len(data) <= 0 {
		return nil, fmt.Errorf("No data found in memory")
	}

	return
}

// DumpSelfMem dump all mapped memory regions of current process
func DumpSelfMem() (map[int64][]byte, error) {
	return crossPlatformDumpSelfMem()
}

// FindEXEInMem search process memory for emp3r0r ELF
func FindEXEInMem() (err error) {
	mem_regions, err := DumpSelfMem()
	if err != nil {
		err = fmt.Errorf("cannot dump self memory: %v", err)
		return
	}

	for base, mem_region := range mem_regions {
		if bytes.Contains(mem_region, []byte("ELF")) && bytes.Contains(mem_region, emp3r0r_data.OneTimeMagicBytes) {
			log.Printf("Found magic string in memory region 0x%x", base)
			end := base + int64(len(mem_region))
			log.Printf("Saving memory region 0x%x - 0x%x", base, end)
			elf_data := append(mem_region, mem_regions[end]...)
			end = base + int64(len(elf_data))
			log.Printf("Saving memory region 0x%x - 0x%x", base, end)
			elf_data = append(mem_region, mem_regions[end]...)
			end = base + int64(len(elf_data))
			log.Printf("Saving memory region 0x%x - 0x%x", base, end)
			elf_data = append(mem_region, mem_regions[end]...)
			log.Printf("Saved %d bytes to EXE_MEM_FILE", len(elf_data))
			EXE_MEM_FILE = elf_data
			break
		}
	}
	if len(EXE_MEM_FILE) <= 0 {
		return fmt.Errorf("no emp3r0r ELF found in memory")
	}

	return
}
